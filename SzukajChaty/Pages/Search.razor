@page "/"
@page "/search"
@inject HttpClient Http

<h3>Wyszukiwarka nieruchomości</h3>

<div class="filters">
    <input @bind="_city" placeholder="Miasto"/>
    <select @bind="_type">
        <option value="">Wszystkie typy</option>
        <option value="flat">Mieszkanie</option>
        <option value="house">Dom</option>
    </select>
    <input type="number" @bind="_priceMin" placeholder="Cena od"/>
    <input type="number" @bind="_priceMax" placeholder="Cena do"/>
    <button @onclick="SearchAsync">Szukaj</button>
</div>

<h4>Portale</h4>
@foreach (var portal in _allPortals)
{
    <label style="margin-right: 10px;">
        <input type="checkbox"
               value="@portal"
               @onchange="e => TogglePortal(portal, e.Value?.ToString())" />
        @portal
    </label>
}

@if (_listings == null)
{
    <p>Wprowadź filtry i kliknij "Szukaj"</p>
}
else if (_listings.Count == 0)
{
    <p>Brak wyników.</p>
}
else
{
    <ul class="listings">
        @foreach (var item in _listings)
        {
            <li class="listing">
                <img src="@item.ImageUrl" width="120" />
                <div>
                    <strong>@item.Title</strong><br />
                    <em>@item.Location</em><br />
                    Cena: @item.Price zł<br />
                    Dodano: @item.PublishedAt.ToShortDateString()<br />
                    Źródło: @item.Source<br />
                    <a href="@item.Url" target="_blank">Zobacz ogłoszenie</a>
                </div>
            </li>
        }
    </ul>
}

@code {
    private string _city = "";
    private string _type = "";
    private decimal? _priceMin;
    private decimal? _priceMax;

    private List<Listing>? _listings;
    private readonly List<string> _allPortals = new() { "Otodom", "OLX", "Nieruchomosci-Online" };
    private readonly List<string> _selectedPortals = new();

    void TogglePortal(string portal, string? value)
    {
        if (value == "true")
        {
            if (!_selectedPortals.Contains(portal))
                _selectedPortals.Add(portal);
        }
        else
        {
            _selectedPortals.Remove(portal);
        }
    }

    async Task SearchAsync()
    {
        var query = $"city={Uri.EscapeDataString(_city)}&type={_type}&priceMin={_priceMin}&priceMax={_priceMax}";
        foreach (var portal in _selectedPortals)
        {
            query += $"&portals={Uri.EscapeDataString(portal)}";
        }
        var url = $"http://localhost:5028/api/search?{query}";


        try
        {
            _listings = await Http.GetFromJsonAsync<List<Listing>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Błąd przy pobieraniu danych: " + ex.Message);
            _listings = new();
        }
    }

    public class Listing
    {
        public string? Title { get; set; }
        public string? Url { get; set; }
        public string? ImageUrl { get; set; }
        public DateTime PublishedAt { get; set; }
        public decimal Price { get; set; }
        public string? Location { get; set; }
        public string? Source { get; set; }
    }
}
